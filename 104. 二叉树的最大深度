一、问题描述
104. 二叉树的最大深度

给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

说明: 叶子节点是指没有子节点的节点。

示例：
给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。


二、思路分析
方法一：分治判断 

方法二：BFS 
详解见102题


三、代码
class Solution {
    public int maxDepth(TreeNode root) {
        //方法一：直接三元 分治判断 
        //为什么结果加1：是因为根节点没有算在内
        return root == null ? 0 : Math.max(maxDepth(root.left),maxDepth(root.right)) + 1;
    
        //方法二：BFS （受102题的启发） 遗憾的是 超出时间限制
        /*
        if(root == null) {
            return 0;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        int depth = 0;
        queue.add(root);
        while(!queue.isEmpty()) {
            int nums = queue.size();
            depth++;
            for(int i=0;i<nums;i++) {
                TreeNode node = queue.poll();
                if(node.left != null) {
                    queue.add(root.left);
                }
                if(node.right != null) {
                    queue.add(root.right);
                }
            }
        }
        return depth;
        */
    }
}

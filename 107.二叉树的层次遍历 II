一、问题描述：二叉树的层次遍历 II

给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]


二、思路分析
（1）方法一：非递归
    用队列先进先出的优势来存储输出每一层的节点
    具体步骤和每行解释见代码注释

（2）方法二：DFS + 递归 
    


三、代码
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //方法二
    //List<List<Integer>> res = new ArrayList<>();
    
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        //方法一：非递归
        List<List<Integer>> res = new ArrayList<>();  //要返回的结果列表
        if(root == null) {    //如果树为空就返回空表
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();  //辅助队列

        queue.add(root);    //将根节点入队
        while(!queue.isEmpty()) {   //循环跳出条件为队空
            List<Integer> curLevel = new ArrayList<>();  //临时列表,每一层节点poll结束后，相当于置空culevel，下次直接存储
            int nums = queue.size();   //记录下此时队列的长度
            for(int i = 0;i<nums;i++) {   //进行len次循环，刚好将本层元素的值全部出队并送入临时列表
                TreeNode node = queue.poll();  //将队顶元素出队
                curLevel.add(node.val);        //将队顶元素的值送入临时列表
                if(node.left != null) {        //队顶元素左子节点入队
                    queue.add(node.left);
                }
                if(node.right != null) {       //队顶元素右子节点入队
                    queue.add(node.right);
                }
            }
            //把队列队首弹出的节点数据 放到列表的头部
            res.add(0,curLevel);
        }
        return res;


        //方法二：递归
        /*
        dfs(root,1);
        Collections.reverse(res);
        return res;
        */
    }

    /*
    public void dfs(TreeNode root,int level) {
        if(root == null) {
            return;
        }
        if(level > res.size()) {   //表示第一次来到这一层
            res.add(new ArrayList<>());
        }
        res.get(level-1).add(root.val);
        dfs(root.left,level+1);
        dfs(root.right,level+1);
    }
    */
}

执行结果：通过  显示详情
执行用时：1 ms, 在所有 Java 提交中击败了98.01%的用户
内存消耗：39.7 MB, 在所有 Java 提交中击败了7.41%的用户

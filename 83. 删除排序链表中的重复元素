一、问题介绍：给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。

示例 1:

输入: 1->1->2
输出: 1->2
示例 2:

输入: 1->1->2->3->3
输出: 1->2->3


二、思路分析：
方法一：原地删除重复元素
(1)指定 node 指针指向头部 head
(2)当 node 和 node.next 的存在为循环结束条件，当二者有一个不存在时说明链表没有去重复的必要了
(3)当 node.val 和 node.next.val 相等时说明需要去重，则将 node 的下一个指针指向下一个的下一个，这样就能达到去重复的效果
(4)如果不相等则 node 移动到下一个位置继续循环
时间复杂度：O(n)


方法二：递归
递归套路解决链表问题：
(1)找终止条件：当head指向链表只剩一个元素的时候，自然是不可能重复的，因此return
(2)想想应该返回什么值：应该返回的自然是已经去重的链表的头节点
(3)每一步要做什么：宏观上考虑，此时head.next已经指向一个去重的链表了，而根据第二步，我应该返回一个去重的链表的头节点。因此这一步应该做的是判断当前的head和head.next是否相等，如果相等则说明重了，返回head.next，否则返回head


三、代码
方法一：原地删除重复元素
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode node = head;
        while(node != null && node.next != null) {
            if(node.val == node.next.val) {
                node.next = node.next.next;
            } else {
                node = node.next;
            }
        }
        return head;
    }
}
        
        
方法二：递归       
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null) {
            return null;
        }
        if(head.next == null) {
            return head;
        }
        if(head.val == head.next.val) {
            head = deleteDuplicates(head.next);
        } else {
            head.next = deleteDuplicates(head.next);
        }
        return head;
    }
}
执行用时：1 ms, 在所有 Java 提交中击败了72.25%的用户
内存消耗：39.2 MB, 在所有 Java 提交中击败了5.97%的用户

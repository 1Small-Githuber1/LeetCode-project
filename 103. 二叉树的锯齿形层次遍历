一、问题描述
103. 二叉树的锯齿形层次遍历：给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]


二、思路分析
（1）方法一：BFS 非递归
    采用BFS的目的是明确每一层的节点个数，然后存进一维列表tmp中，其难点有二：
    1、如何确定每一层的节点个数并遍历完每一层后要更新这个列表为空，方便下一层存储
    2、level为奇数层，则从左到右存进tmp中；level是偶数层，则从右到左存进tmp
        从右到左存进tmp列表，有以下几个方法：
        2.1、用队列，add（node.val）
        2.2、用栈，push（node.val）


（2）方法二：DFS 递归
    使用递归实现 DFS 算法。定义一个递归方法 DFS(node, level)，方法参数为当前节点 node 和指定层数 level。该方法共执行三个步骤：

1、如果是第一次访问该层的节点，即该层的双端队列不存在。那么创建一个双端队列，并添加该节点到队列中。

2、如果当前层的双端队列已存在，根据顺序，将当前节点插入队列头部或尾部。

3、最后，为每个节点调用该递归方法。


复杂度分析
时间复杂度：O(N)，其中N是树中节点的数量。与 BFS 相同，每个节点只访问一次。
空间复杂度：O(H)，其中 H 是树的高度。例如：包含 N 个节点的树，高度大约为 log 2N。与 BFS 不同，在 DFS 中不需要维护双端队列。
方法递归调用会产生额外的内存消耗。方法 DFS(node, level) 的调用堆栈大小刚好等于节点所在层数。因此 DFS 的空间复杂度为O(log 2 N)，这比 BFS 好很多。



三、代码
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        //方法一：BFS 非递归
        //判断二叉树为空的情况
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) {
            return res;
        }
        //2、创建一个队列，用于存储每一层的节点
        Queue<TreeNode> queue = new LinkedList<>();
        //3、向队列中加入节点
        queue.add(root);
        int level = 1;    //根节点相当于第一层
        while (!queue.isEmpty()) {
            List<Integer> tmp = new ArrayList<>();
            int nums = queue.size();    //取得每一层的长度
            for (int i = 0; i < nums; i++) {
                TreeNode node = queue.poll();
                //这里默认根节点是第1层，偶数层相当于从右往左遍历，所以要添加到集合的开头
                if(level %2 == 0) {
                    tmp.add(0,node.val);    //0 相当于是开头
                } else {    // 如果是奇数层相当于从左往右遍历，要把数据添加到集合的末尾
                    tmp.add(node.val);
                }
                if(node.left != null) {
                    queue.offer(node.left);
                }
                if(node.right != null) {
                    queue.offer(node.right);
                }         
            }
            res.add(tmp);
            level++;
        }
        return res;
        

        //方法二 DFS + 递归
        /*
        List<List<Integer>> res = new ArrayList<>();
        dfs(root,1,res);
        return res;
        */
    }

    /*
    public void dfs(TreeNode root,int level,List<List<Integer>> res) {
        if(root == null) {
            return;
        }
        if(level > res.size()) {
            res.add(new ArrayList<Integer>());
        }
        if(level%2 == 0) {
            res.get(level - 1).add(0,root.val); 
        } else {
            res.get(level - 1).add(root.val);
        }
        dfs(root.left,level + 1,res);
        dfs(root.right,level + 1,res);
    }
    */
    
}

一、问题描述
102. 二叉树的层序遍历

给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。

示例：
二叉树：[3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]


二、思路分析
方法：BFS广度优先遍历+队列
难点：本题难点莫过于何时结束本层节点循环，也就是怎么判断哪些节点是一层的？
解决办法：在每一层遍历开始前，先记录队列中的结点数量 n（也就是这一层的结点数量），然后一口气处理完这一层的 n个结点。

顺便简单写一下BFS用队列的代码结构
void bfs(TreeNode root) {
    Queue<TreeNode> queue = new ArrayDeque<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        TreeNode node = queue.poll(); // Java 的 pop 写作 poll()
        if (node.left != null) {
            queue.add(node.left);
        }
        if (node.right != null) {
            queue.add(node.right);
        }
    }
}


三、代码
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) {
            return new ArrayList<>();
        }
        //1、先构建了一个双层列表，用于存储结果
        List<List<Integer>> result = new ArrayList<>();
        //2、再创建一个队列，用于存储每一层的节点，然后再pop
        Queue<TreeNode> queue = new LinkedList<>();

        //3、判断二叉树不为空的操作
        if(root != null) {
            queue.add(root);    
        }

        //在队列非空时处理
        while (!queue.isEmpty()) {
            //4、创建一个单层列表，用来存储每一层的结果，每循环一次，新建列表就相当于清空一次列表
            List<Integer> middle = new ArrayList<>();

            //5、开始遍历队列输出
            int num = queue.size();
            for(int i=0;i<num;i++) {
                TreeNode node = queue.poll();
                middle.add(node.val);
                
                //6、判断节点的左右子节点
                if(node.left != null) {
                    queue.add(node.left);
                }
                if(node.right != null) {
                    queue.add(node.right);
                }
            }
            result.add(middle);
        }
        return result;
    }
}

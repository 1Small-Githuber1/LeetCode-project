一、问题：给定一个二叉树，返回它的中序遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]

进阶: 递归算法很简单，你可以通过迭代算法完成吗？


二、思路分析
2.1 方法一：递归实现
（1）根据中序遍历，先访问左子节点，再访问根节点，最后访问右子节点
（2）创建一个列表用来存储最后的结果
（3）判断根节点是否为空，为空返回null
（4）递归左子节点
（5）将根节点的值add到list中
（6）遍历右子节点


2.2 方法二：非递归，用栈实现
（1）创建一个存储结果的列表list和一个用来push根节点和左子节点的栈stack
（2）新建一个节点curNode指向root节点
（3）当curNode不为空或者stack不为空进行循环判断
（4）将当前curNode指向的根节点push到stack中，curNode并指向左子节点
（5）当curNode为空时，开始pop出stack中元素，并将curNod对应的val加入到list中
（6）curNode指向右子节点

三、代码实现
3.1 方法一：递归实现
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    //方法一：用递归
    /*
    List<Integer> list = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {    
        if(root == null) {
            return list;
        }
        //递归向左子树中序遍历
		inorderTraversal(root.left);
		list.add(root.val);
		//递归向右子树中序遍历
		inorderTraversal(root.right);
        return list;
    }
}

3.2 方法二：用栈
class Solution {
		public List<Integer> inorderTraversal(TreeNode root) { 
        List<Integer> list = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curNode = root;
        while(curNode != null || !stack.isEmpty()) {
            while(curNode != null) {
                stack.push(curNode);
                curNode = curNode.left;
            }
            curNode = stack.pop();
            list.add(curNode.val);
            curNode = curNode.right;
        }
        return list;
    }
}
